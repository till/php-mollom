<?php

/**
 * Services_Mollom_Common
 */
require_once 'Services/Mollom/Common.php';

class Services_Mollom_Captcha extends Services_Mollom_Common
{
	/**
	 * Validates the answer for a CAPTCHA
	 *
	 * When the answer is false, you should request a new image- or audio-CAPTCHA, make sure your provide the current Mollom-sessionid.
	 * The sessionid will be used to track spambots that try to solve CAPTHCA's by brute force.
	 *
	 * @return bool
	 * @param  string $sessionId
	 * @param  string $solution
	 */
	public function check($sessionId, $solution)
	{
		// redefine
		$sessionId = (string) $sessionId;
		$solution  = (string) $solution;

		// set autor ip
		$authorIp = $this->getIpAddress();

		// set parameters
		$parameters['session_id'] = $sessionId;
		$parameters['solution']   = $solution;

		if ($authorIp != null) {
		    $parameters['author_ip'] = (string) $authorIp;
        }

		// do the call
        // FIXME: it's not a string
		$responseString = $this->doCall('checkCaptcha', $parameters);

		// validate
		if (!isset($responseString->params->param->value->boolean)) {
		    throw new Exception('Invalid response in checkCapthca.');
        }

		// return
		if((string) $responseString->params->param->value->boolean == '1') {
		    return true;
        }

		// fallback
		return false;
	}

	/**
	 * Get a CAPTCHA-mp3 generated by Mollom
	 *
	 * If your already called getAudioCaptcha make sure you provide at least the $sessionId. It will be used
	 * to identify visitors that are trying to break a CAPTCHA with brute force.
	 *
	 * REMARK: the Mollom-sessionid is NOT related to HTTP-session, so don't send 'session_id'.
	 *
	 * The function will return an array with 3 elements:
	 * - session_id		the session_id from Mollom
	 * - url			the url to the mp3-file
	 * - html			html that can be used on your website to display the CAPTCHA
	 *
	 * @return	array
	 * @param	string[optional] $sessionId
	 */
	public function getAudio($sessionId = null)
	{
		// init vars
		$aReturn    = array();
		$parameters = array();

		// set autor ip
		$authorIp = $this->getIpAddress();
		
		// set parameters
		if($sessionId !== null) {
		    $parameters['session_id'] = (string) $sessionId;
        }
		if($authorIp !== null) {
		    $parameters['author_ip'] = (string) $authorIp;
        }

		// do the call
		$responseString = $this->doCall('getAudioCaptcha', $parameters);

		// validate
		if (!isset($responseString->params->param->value->struct->member)) {
		    throw new Exception('Invalid response in getAudioCaptcha.');
        }
        
		// loop elements
		foreach ($responseString->params->param->value->struct->member as $part) {
		    $aReturn[(string) $part->name] = (string) $part->value->string;
        }

		// add image html
		$aReturn['html'] = '<object type="audio/mpeg" data="'. $aReturn['url'] .'" width="50" height="16">'."\n"
								."\t".'<param name="autoplay" value="false" />'."\n"
								."\t".'<param name="controller" value="true" />'."\n"
							.'</object>';

		// return
		return $aReturn;
	}


	/**
	 * Get a CAPTCHA-image generated by Mollom
	 *
	 * If your already called getImageCaptcha make sure you provide at least the $sessionId. It will be used
	 * to identify visitors that are trying to break a CAPTCHA with brute force.
	 *
	 * REMARK: the Mollom-sessionid is NOT related to HTTP-session, so don't send 'session_id'.
	 *
	 * The function will return an array with 3 elements:
	 * - session_id		the session_id from Mollom
	 * - url			the url to the image
	 * - html			html that can be used on your website to display the CAPTCHA
	 *
	 * @return	array
	 * @param	string[optional] $sessionId
	 */
	public static function getImage($sessionId = null)
	{
		// init vars
		$aReturn = array();
		$parameters = array();

		// set autor ip
		$authorIp = self::getIpAddress();
		
		// set parameters
		if ($sessionId !== null) {
		    $parameters['session_id'] = (string) $sessionId;
        }
		if ($authorIp !== null) {
		    $parameters['author_ip'] = (string) $authorIp;
        }
        
		// do the call
		$responseString = $this->doCall('getImageCaptcha', $parameters);

		// validate
		if (!isset($responseString->params->param->value->struct->member)) {
		    throw new Exception('Invalid response in getImageCaptcha.');
        }

		// loop elements
		foreach ($responseString->params->param->value->struct->member as $part) {
		    $aReturn[(string) $part->name] = (string) $part->value->string;
        }
        
		// add image html
		$aReturn['html'] = '<img src="'. $aReturn['url'] .'" alt="Mollom CAPTCHA" />';

		// return
		return $aReturn;
	}
}